##################
### MISC
##################
	# show all options set by the user
-options

	# Docking option group (true)
#-docking:docking

#-docking:view

#-database /cluster/home/biol/akahrama/src/rosetta/3.1/rosetta_database
-database ROSETTA_DB_LOCATION
	# if constant_seed is set than instead of a random seed number, the default number 1111111 is used.
#-run:constant_seed 

	# defines docking partners by chainID for multichain docking partners, example: docking chains L+H with A is -partners LH_A ("_")
#-docking:partners A_D

	# use the graphical viewer (false)
#-docking:view

	# Denotes partner1 as an ensemble. Turns on ensemble mode for partner 1. String is multi-model pdb file ("")
#-docking:ensemble1

	# Denotes partner2 as an ensemble. Turns on ensemble mode for partner 2. String is multi-model pdb file ("")
#-docking:ensemble2



###########################
### INPUT
###########################
	# PDB file containing both chains to be docked seperated by a TER line
#-in:file:s 1brs.pdb 

	# PDB file of the native complex structure, which will be used to output RMSD values within the energy score file (see -out:file:o) 
#-in:file:native 1brs.pdb 


###########################
### OUTPUT
###########################
	# is supposed to show all options that have been accessed, but rather it seems it list all options that are available. Might be a bug.
#-out:show_accessed_options

-out:overwrite

	# name of fullatom energy contribution file. Name is 1brs.test.fasc
#-out:file:o scores

	# Output PDBs. Works only in the ab initio protocol
#-out:pdb

	# number of loop runs to create different solutions for the same protein protein complex. Solutions are stored at XXXX_nnnn.pdb, 
	# where XXXX is the filename of the starting structure and nnnn is an integer increment 
#-out:nstruct 100

	# Enable full-atom output of PDB or centroid structures. Print out energy contributions from each energy term. Following terms are printed:
	# SCORE: total_score         rms     cen_rms dslf_ca_dih dslf_cs_ang dslf_ss_dih  dslf_ss_dst      fa_atr      fa_dun      fa_rep      fa_sol hack_elec hbond_bb_sc 
	# SCORE: (continued) hbond_lr_bb    hbond_sc hbond_sr_bb interchain_contact interchain_env interchain_pair interchain_vdw. 
	# If not set then more simple output is created with file-ending sc, otherwise file ending fasc:
	# SCORE: total_score         rms     cen_rms interchain_contact interchain_env interchain_pair interchain_vdw        st_rmsd description
	# if docking_ppk is used this flag is automatically set.
#-out:file:fullatom

	# prefix for energy score file and pdb file
#-out:prefix test

###########################
### INITIAL PERTURBATION
###########################
	# once both structures are moved away, some translation is carried out on second structure. Do a small perturbation with partner two: -dock_pert ANGSTROMS DEGREES.
	# if angle ie. first value is too large e.g. 10 than binding partner is too far from native complex due to low sampling resolution. Good values for protein docking are 3 A and 8 deg.
	# Also useful for local refinement with 1 1 as parameter.
-docking:dock_pert 3 8

	# Spin the second docking partner around axes that is span between both center of masses of both binding partners 2 (false). Is automatically on when randomize is used switched on.
	# also induces a single translation step when moving away is initiated
	# THIS MIGHT BE TRUE IN GENERAL. CHECK!!! creates several decoys at high-resolution until docking solution has lowever energy than cluster::output_score_filter = 1000000.0
#-docking:spin

	# Randomize the second docking partner (false)
	# simultaniously switches on docking:spin flag
#-docking:randomize2

	# Not clear what effect exactly is. 1st structure is not transformed, but 2nd structure is now at a completely different location; distinct from any other previous calculation.  
#-docking:randomize1

	# Uniform random repositioning within a sphere of the given radius, where uniform random repositioning indicates that the random position is determined by a uniform random number 
	# @details Sample points in a cube randomly, and discard ones that are outside the sphere.
	# This gives us *uniform* sampling of the space inside, whereas
	# choosing a random distance and a random direction samples more near the center.
#-docking:uniform_trans 1

	# skips initial perturbation and centroid mode search and goes direct to fullatom mode.[Boolean]
	# set fullatom to true
	# switch off lowres filter
	# do straight high-resolution search i.e. skip initial perturbation+low-resolution search within centroid mode
	# on its own executed with MCM
	# is automatically set when dock_ppk is set
#-docking:docking_local_refine

############################
### SCORING 
############################
	# scorefunction option group (true)
#-score:score

	# Name of weights file without extension .wts (standard)
-score:weights docking

	# Name of patch file without extension ("")
#-score:patch

	# Use the 2008 Dunbrack library instead of the 2002 library
#-score:dun08

	# Make an empty score - i.e. NO scoring
#-score:empty

	# How far does the FA pair potential go out to ? (6.0)
#-score:fa_max_dis

	# Turn on Lennard Jones attractive term for hydrogen atoms
#-score:fa_Hatr

	# Disable the long-range part of angular dependent potential. It does not affect the distance dependent part of the potential (false)
#-score:hbond_no_lr

	# User defined fading paramters for hbond, a vector of eight numbers. 
	# first four are lower distance cutoff, lower distance ramping, upper distance ramping, upper distance cutoff; 
	# next two are lower -cos(theta) cutoff and ramping (angle at proton donor)
	# and the last two are lower -cos(psi) cutoff and ramping (angle at acceptor) 
	# default value in the code is 1.9 2.3 2.3 3.0 0.0 0.05 0.0 0.05
#-score:hbond_fade

	# Revert to old style etables
#-score:no_smooth_etables

	# lowers energy well at 6.5A
#-score:etable_lr

	# Read etables from files with given prefix
#-score:input_etables

	# Write out etables to files with given prefix
#-score:output_etables

	# Target of RMS optimization for RMS_Energy EnergyMethod (0.0)
#-score:rms_target

	# Uses neighbor-dependent ramachandran maps (false)
#-score:ramaneighbors

	# Name of weights file (without extension .wts) to use during optH
#-score:optH_weights

	# Name of weights file (without extension .wts) to use during optH
#-score:optH_patch

	# Number of symmetric Units in design for use with symE scoring (-1)
#-score:symE_units

	# Energy bonus per match for use with symE scoring (0.0)
#-score:symE_bonus

	# Lower Bound for neighbor Vector scoring (3.3)
#-score:NV_lbound

	# Upper Bound for neighbor Vector scoring (11.1)
#-score:NV_ubound

	# Location of path to potential lookup table ("neighbor_vector_score.histogram")
#-score:NV_table

	# New hbond potential with a different angular dependence
#-score:new_hb

	# Name of P_AA_PP potential file; search in the local directory first, then look in the database ("")
#-score:p_aa_pp

	# Name of dun08 dir
#-score:dun08_dir

	# Name of ch_o_bond potential file; search in the local directory first, then look in the database ("")
#-score:ch_o_bond_potential

	# New carbon hbond potential with closer energy minimum (true)
#-score:yf_chbond

	# Rama potential calculated as input for both rama and rama2b. By default, the potential is square for (rama+entropy) > 1.0
#-score:rama_not_squared

	# Use a 3D lookup table for doing neighbor calculations.  For spherical, well-distributed conformations, O(N) neighbor detection instead of general O(NlgN) (false)
#-score:find_neighbors_3dgrid

	# When using occ_sol_exact, compute energies subject to pairwise additivity; not recommended - intended for parameterization / evaluation purposes (false)
#-score:exact_occ_pairwise

	# When using occ_sol_exact with the exact_occ_pairwise flag, split the energies between both contributing residues instead of assigning it just to the polar residue 
	# not recommended - intended for parameterization / evaluation purposes (false)
#-score:exact_occ_split_between_res

	# offset reference energies using 3 character residue types (example: TRP 0.9 HIS 0.3)
#-score:ref_offsets

	# Output the energy for each residue (false)
#-score:output_residue_energies

	# Name of custom pair distance energy file ("")
#-score:fa_custom_pair_distance_file


############################
### PRE-(RE)PACKING
############################
	# The intention is for all ResidueTasks to *start off* as repackable.
	# Some, like protein AAs and DNA, also start off designable.


	# repacked_away - slide partners away from each other, and repack
	# prepacked-slide partners back in from repacked away 
	# reppk-repack the interface residues in the prepacked structure.
	# energy of prepacked will always be equal to or higher than that of repacked away, 
	# since the optimal positions of the sidechains in the away form will be nonoptimal when the partners are together
	# Do not repack the side-chains of partner 1 or 2 parameter in conjunction with dock_ppk
	# result resembles most the standard MCM run without any further parameter (5log).  
	# according to online manual "Using RosettaDock++" repacking is slide: partners away from
	# if both norepack1 and norepack2 are set, then automatically dock_ppk is set and thus no minimization is run, only an energy evaluation of the native structure.
	# Has no influence with dock_min parameter
	# On its own with fullatom option is executed with MCM
	# Do not repack the side-chains of partner 1 or 2 (false)
#-docking:norepack1
#-docking:norepack2

	# Packing option group (true)
#-packing:packing

	# Disable design at all positions (false)
#-packing:repack_only

	# Disable repacking/design at all positions (false)
#-packing:prevent_repacking

	# Number of fixbb packing iterations.  Each time packing occurs, it will pack this many times and return only the best result.  Implemented at level of PackRotamersMover (1)
#-packing:ndruns

	# Use larger LJ radii for softer potential
#-packing:soft_rep_design

	# Use electrostatic repulsion
#-packing:use_electrostatic_repulsion

	# Output NMR-style PDB's with the rotamer sets used during packing
#-packing:dump_rotamer_sets

	# fraction of possible dunbrack rotamers to include in each single residue rotamer set, for 'buried' residues. lower(0).upper(1).def(0.98);
#-packing:dunbrack_prob_buried

	# fraction of possible dunbrack rotamers to include in each single residue rotamer set, for 'nonburied' residues. lower(0).upper(1).def(0.95);
#-packing:dunbrack_prob_nonburied

	# Do not optimize hydrogen placement at the time of a PDB load (false)
#-packing:no_optH

	# If running optH, use the Multi-Cool Annealer, which is more consistent, but slower (false)
#-packing:optH_MCA

	# Run packer to fix residues with missing sidechain density at PDB load (true)
#-packing:pack_missing_sidechains

	# Preserve C-beta positions during rotamer construction (true)
#-packing:preserve_c_beta

	# Consider flipping HIS, ASN, and GLN during hydrogen placement optimization (false)
#-packing:flip_HNQ

	# seqpos numbers of his residus whose tautomer (single/double bond order) should be fixed during repacking (false)
#-packing:fix_his_tautomer

	# include pymol-style selections when printing a PackerTask (false). Seems to not work.
#-packing:print_pymol_selection

	# Use rotamers from input structure in packing.	By default, input sidechain coords are NOT included in rotamer set but are discarded before the initial pack; with this flag, the input rotamers will NOT be discarded. 
	# Note that once the starting rotamers are replaced by any mechanism, they are no longer included in the rotamer set (rotamers included by coordinates)" );
-packing:use_input_sc

	# Read 'native' rotamers from supplied PDB(s). Unlike -use_input_sc, these rotamers will not be lost during repacks. This option requires specific support from the protocol; it is NOT built in to PackerTask.initialize_from_command_line()" );
#-packing:unboundrot

	# number of neighbors a residue must have before extra rotamers are used (18)
#-packing:extrachi_cutoff

	# use extra chi1 sub-rotamers for all residues that pass the extrachi_cutoff (false)
-packing:ex1
	# use extra chi1 sub-rotamers for all residues that pass the extrachi_cutoff. 
	# The integers that follow the ex flags specify the pattern for chi dihedral angle sampling 
	# There are currently 8 options; they all include the original chi dihedral angle. 
	# NO_EXTRA_CHI_SAMPLES          0          original dihedral only; same as using no flag at all 
	# EX_ONE_STDDEV                 1 Default  +/- one standard deviation (sd); 3 samples 
	# EX_ONE_HALF_STEP_STDDEV       2          +/- 0.5 sd; 3 samples 
	# EX_TWO_FULL_STEP_STDDEVS      3          +/- 1 & 2 sd; 5 samples 
	# EX_TWO_HALF_STEP_STDDEVS      4          +/- 0.5 & 1 sd; 5 samples 
	# EX_FOUR_HALF_STEP_STDDEVS     5          +/- 0.5, 1, 1.5 & 2 sd; 9 samples 
	# EX_THREE_THIRD_STEP_STDDEVS   6          +/- 0.33, 0.67, 1 sd; 7 samples 
	# EX_SIX_QUARTER_STEP_STDDEVS   7          +/- 0.25, 0.5, 0.75, 1, 1.25 & 1.5 sd; 13 samples
#-packing:ex1:level
	# apply special operations, see RotamerOperation class, on ex1 rotamers
#-packing:ex1:operate

	# "use extra chi2 sub-rotamers for all residues that pass the extrachi_cutoff
#-packing:ex2
	# see above ex1:level
#-packing:ex2:level
	# see above ex1:operate
#-packing:ex2:operate

	# use extra chi1 sub-rotamers for all residues that pass the extrachi_cutoff
#-packing:ex3
#-packing:ex3:level 
#-packing:ex3:operate

	# use extra chi1 sub-rotamers for all residues that pass the extrachi_cutoff"
#-packing:ex4
#-packing:ex4:level
#-packing:ex4:operate

	# use extra chi1 sub-rotamers for aromatic residues that pass the extrachi_cutoff
#-packing:ex1aro
#-packing:ex1aro:level

	# use extra chi1 sub-rotamers for aromatic residues that pass the extrachi_cutoff
-packing:ex2aro
#-packing:ex2aro:level

	# use extra chi1 sub-rotamers for all aromatic residues
#-packing:ex1aro_exposed
#-packing:ex1aro_exposed:level

	# use extra chi2 sub-rotamers for all aromatic residues
#-packing:ex2aro_exposed
#-packing:ex2aro_exposed:level

	# use extra dna rotamers
#-packing:exdna
	# extra dna rotamer sample level -- rotbuilder converts from 0-7 to number" ).legal(0).legal(1).legal(2).legal(3).legal(4).legal(5).legal(6).legal(7).def(1);
#-packing:exdna:level

	# resfile filename(s).  Most protocols use only the first and will ignore the rest; it does not track against -s or -l automatically ("resfile")
	# List all residues that should be kept unchanged in their conformation 
#-packing:resfile

	# Multiplier for number of outer iterations (1.0)
	# applied within simulated annealing
#-packing:outeriterations_scaling

	# Multiplier for number of inner iterations (1.0)
	# applied within simulated annealing
#-packing:inneriterations_scaling

	# Gives list of adduct names to generate for residue definitions.  Each adduct name may be followed by an optional integer, which gives a maximum number of adducts of that type which will be generated
#-packing:adducts

	# Use rotamers with explicit waters (false)
	# is set automatically true when "solvate" is set 
#-packing:explicit_h2o

	# Add explicit water, but don't try to place water such that it bridges Hbonds, just put it on every available Hbond donor/acceptor where there's no clash (implies explicit_h2o)
#-packing:solvate

	# Set pair term for His-His to zero.
	# Seems to not work anymore
#-packing:no_his_his_pairE 

	# Force the packer to use the linear memory interaction graph; each RPE may be computed more than once, but recently-computed RPEs are reused. The integer parameter specifies the number of recent rotamers to store RPEs for. 
	# 10 is the recommended size. Memory use scales linearly with the number of rotamers at about 200 bytes per rotamer per recent rotamers to store RPEs for (~4 KB per rotamer by default) (10)
#-packing:linmem_ig



#################################################################################
### LOW / HIGH RESOLUTION
#################################################################################
	# how many repeats to use. If a decoy does not pass the low- and high-resolution filters, how many attempts to make before failure (1000)
#-docking:max_repeats

	# The magnitude of the translational perturbation during mcm in docking. Applied to low resolution MCM as well as to high resolution MCM (0.1)
-docking:dock_mcm_trans_magnitude 0.1

	# The magnitude of the rotational perturbation during mcm in docking. Applied to low resolution MCM as well as to high resolution MCM (5.0)
-docking:dock_mcm_rot_magnitude 1.0

	# distance in angstroms for calculating what residues are at an interface via InterfaceNeighborDefinitionCalculator (10.0)
-pose_metrics:interface_cutoff 8



#################################################################################
### LOW-RESOLUTION/RIGID BODY TRIAL/CENTROID MODE in MCM minimization
#################################################################################
	# use low res docking filters after centroid mode (false)
	# if not set, than low resolution filters are applied for decoy calculation. If set, than filters are skipped.
	# centroid representation of side chains
	# no mover is applied, Just rotamer library. Does only a single low-resolution run. By default any low-resolution constellation will be accepted.
#-docking:fake_native

	# manually sets the lowres docking filter: -dock_lowres_filter <INTERCHAIN_CONTACT CUTOFF> <INTERCHAIN_VDW CUTOFF>. Default values for protein docking are 10.0 and 1.0.
	# set user defined values for interchain_contact and interchain_vdw. By default both have values of 10 and 1. If both criteria are met, low resolution pose will be accepted.
	# for low resolution docking, only the contact surface energy and the vdw energy are important and checked. 
	# further filter is -constraint:cst_file (constraints filename for centroids), which will check that the atom_pair constraint is >=1
#-docking:dock_lowres_filter 10.0 1.0

	# number of rigid-body MC moves/rotations
	# number of "protocols.TrialMover: Acceptance rate" runs. Checks whether according Boltzmann move is accepted. accept_rate is calculated with accepted_/(accepted_+rejected_+1e-100);
	# size of MC rigid-body move is given by docking:trans_magnitude and docking:rot_magnitude. By default those are 0.1 and 5.
	# for ( int i=1; i<=outer_cycles_; ++i) {
	#	rigid_body_trial( pose );
	#	if ( accept_rate_ < 0.5 ) {
	#		trans_magnitude_ *= 0.9;
	#		rot_magnitude_ *= 0.9;
	#	} else {
	#		trans_magnitude_ *= 1.1;
	#		rot_magnitude_ *= 1.1;
	#	}
	# }
	# Outer cycles during docking rigid body adaptive moves (10)
-docking:docking_centroid_outer_cycles 10

	# number of trial to find the energy minimum within MCM
	# effect not clear from log file. But a second structure run "REPEAT STRUCTURE 2" is added.
	# number of times the mover should be applied with the same trans_magnitude and rot_magnitude values. The pose with the lowest energy is taken and passed on to the outer-cycle loop.
	# nmoves_=inner_cycles
	# for ( int i=1; i<=nmoves_; ++i ) {
	# 	T("protocols.moves.RepeatMover") << "Move: " << i << "/" << nmoves_ << std:endl;
	#	mover_->apply( pose );
	# }
	# Inner cycles during docking rigid body adaptive moves (50)
-docking:docking_centroid_inner_cycles 50



###########################
### HIGH RESOLUTION DOCKING
###########################
	# does rotamer trials with minimization, RTMIN (false)
	# is executed at the initial repacking phase in the method recover_sidechains: Do initial pack over all residues within 1000A of the interface.
	# repacking is always on. Extend of repacking can be determined by using sc_min and dock_rtmin parameter
	# only applied to high resolution docking within MCM
	# also applied to dock_ppk. Here first sequence of moves is 
	# 1.) scmin on structure (don't know why this is necessary)
	# 2.) translate away
	# 3.) prepack_full_repack
	# 4.) dock_rtmin
	# 5.) scmin
	# 6.) translate back
-docking:dock_rtmin

	# does sidechain minimization of interface residues (false)
	# is executed at the initial repacking phase in the method recover_sidechains: Do initial pack over all residues within 1000A of the interface.
	# repacking is always on. Extend of repacking can be determined by using sc_min and dock_rtmin parameter
	# applied to high resolution docking within MCM
	# also applied to dock_ppk. Here first sequence of moves is 
	# 1.) scmin on structure (don't know why this is necessary)
	# 2.) translate away
	# 3.) prepack_full_repack
	# 4.) dock_rtmin
	# 5.) scmin
	# 6.) translate back
-docking:sc_min



###########################
### FLEXIBLE BB DOCKING
###########################

	# How to do flexible backbone docking, if at all. Choices include fixedbb, ccd, alc, and backrub (fixedbb)
#-docking:flexible_bb_docking
	# Distance between chains required to define a residue as having flexible backbone, ie. loop (10)
#-docking:flexible_bb_docking_interface_dist



###########################
### PROTOCOL RUN MODE 
###########################
	# dock_min or dock_mcm or dock_ppk. If no parameters are given except of infile+DB than no sidechain are included, i.e. no rotamer selection + no MCM/MIN. Only a single centroid rigid body adaptive.
	# dock_min: Minimize the final fullatom structure (false). On its own is equal to no parameter. Thus no parameter executes dock_min? 
#-docking:dock_min # steepest descent minimization
	# docking prepack mode (false)
	# dock_ppk: prepack sidechains. if used with norepack1/2 option than dock_ppk is run for high-resol docking and no prepacking is done. By default fullatom option is set. Result is native structure. 
	# Might be important for evaluationg rosetta score for structure predition etc.
	# Automatically sets docking_local_refine parameter to true
	# switches off the high resolution filter, which by default excludes all structures having a score >= 1000000. Filter energy can be adjusted with command -cluster:output_score_filter
#-docking:dock_ppk # no minimization
	# dock_mcm: does not exist anymore. Is automatically executed if dock_ppk or dock_min are not selected.
	# (is needed for the full atom run, which also moves the two partners relative to each other.
	# prior to run, replace side chains of both structures with side chain rotamers so to avoid bad results due to unnatural conformations from e.g. crystal contacts)
	# if dock_ppk is set, then no minimization is done. Only side chains are replaced by optimal rotamers. Structure has large self-energy due to steric clashes of atoms. 
	# However if run with both norepack1 and norepack2 then no structural changes to the complex are done and only an energy evaluation of the structure is done.  
	# commandline parameter doesn't work anymore since 3.1 version
	#-docking:dock_mcm  #Monte Carlo minimization

