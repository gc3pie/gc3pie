-*- mode: org -*-

* gc3libs.optimizer [22/24]
** DONE have `evolve_fn` compute the `dim` parameter from `population`
** DONE `has_converged` should not check for iteration numbers
** DONE rename `DifferntialEvolutionSequential` not to suggest it's a `SequentialTaskCollection`
** DONE rename the `best*` variables because they're too similar in names
** DONE `max_n_resample` should not be hard-coded
** DONE use `raise NotImplementedError` instead of `pass` in the base class (unless `pass` is a reasoable default implementation)
** DONE move the "generic" code from DifferentialEvolutionAlgorithm into `EvolutionaryAlgorithm`
** DONE use a `strategy` enum (`gc3libs.utils.Enum`) to collect all strategies
** DONE credit the DiffEvo website for the description of strategies?
** DONE rename `dif_evolution` to `diff_evo` or simply `de`?
** TODO is `__getstate__` in DiffEvoAlgorithm still used/needed?
** DONE move `np.set_printoptions()` out of the library to example code
** DONE find parameters that fail less than <10% of the time or preseed to always get the correct run
** DONE fix docstring in DifferentialEvolutionSequential
** DONE link to paper with good description of the algorithm
** rearrange classes and file layout?

   Proposal:

     __init__.py: contains base classes (e.g., EvolutionaryAlgorithm)
     drivers.py: GridDriver, LocalDriver
     dif_evolution.py: DifferentialEvolutionAlgorithm
     extra.py: print_stats(), plot_population(), etc. (i.e., add-ons that are not "core" functionality)

** test GridDriver in the tests.

   This might require something like this (taken from gc3libs/backends/tests/test_shellcmd.py`:)

    class TestGridDriver(object):
        CONF="""
    [resource/localhost_test]
    type=shellcmd
    transport=local
    time_cmd=/usr/bin/time
    max_cores=2
    max_cores_per_job=2
    max_memory_per_core=2
    max_walltime=2
    architecture=x64_64
    auth=noauth
    enabled=True

    [auth/noauth]
    type=none
    """

        def setUp(self):
            (fd, cfgfile) = tempfile.mkstemp()
            f = os.fdopen(fd, 'w+')
            f.write(TestGridDriver.CONF)
            f.close()
            self.files_to_remove = [cfgfile]

            self.cfg = gc3libs.config.Configuration()
            self.cfg.merge_file(cfgfile)

            self.core = gc3libs.core.Core(self.cfg)
            self.backend = self.core.get_backend('localhost_test')

        def cleanup_file(self, fname):
            self.files_to_remove.append(fname)

        def tearDown(self):
            for fname in self.files_to_remove:
                if os.path.isdir(fname):
                    shutil.rmtree(fname)
                elif os.path.exists(fname):
                    os.remove(fname)

        def test_optimizer(self):
            # basically, adapt `opt_rosenb4rock.py`

** DONE Create output function with meaningful output for the optimizer
** DONE Use extra.py in test cases.
** DONE Finish documentation in all files
** DONE Write small note on how to compile the docs
** TODO Check continuation problem with opt_rosenbrock.py
** DONE is `utils.py` still needed? if not, remove it :-)
** DONE rewrite `rosenbrock.cpp` to `rosenbrock.py` and use the Python version in tests

   (Because we know that we have a Python interpreter; we're not sure if a C++ compiler is available.)

** DONE rename `GridDriver` to `ParallelDriver` and `LocalDriver` to `SequentialDriver`?

   - `TaskCollectionDriver`? (A bit verbose?)
   - `TaskDriver`? (A `Task` is a specific object in GC3Pie but could be anything in "nromal speak".  Plus it looks a lot like `TaxiDriver`.)

   All of the above make sense for people who know GC3Pie, but won't make sense for anyone else, esp. newbies.

   - `ParallelTaskDriver` -- suggests that computational work is done in parallel
   - `ParallelDriver` -- shorted version of the above, but then we would rename the `LocalDriver` to `SequentialDriver` which might lead to confusion with `SequentialTaskCollection`s?
** DONE test_GridDriver: decide whether to mkdtemp in setUp() or keep it as it is

   Maybe use `setUpModule()` and `tesrDownModule()`, see: https://gist.github.com/3796718
